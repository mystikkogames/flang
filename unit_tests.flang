###
Unit tests
language: flang
author: mystikkogames ( mystikkogames@protonmail.com )
license: GPLv2
###

( include "utils.flang" )

( function :flang_unit_tests ( ) :
    ( "1 2 3 4 5 6 " :remove_whitespace "123456" == :assert )
    ( "a b c d e f " :remove_whitespace "abcdef" == :assert )
    ( " " :is_whitespace :assert )
    
    ( "sdf 012-12-1 dfdsf" "/\d{3}-\d{2}-\d{1}/" :regex_match :assert )    
    ( "sdf 012dfdsf" "/[0-9]{3}/" :regex_match :assert )    
    ( "sdf 040-1234567 dfdsf" "/[0-9]{3}-[0-9]{7}/" :regex_match :assert )    
    ( "040-1234567 dfdsf" "/^[0-9]{3}-[0-9]{7}/" :regex_match :assert )    
  
    ( "sdf 040-1234567 dfdsf" "/^[0-9]{3}-[0-9]{7}/" :regex_match ! :assert )    
    ( "sdf 012dfdsf" "/[0-9]{4}/" :regex_match ! :assert )
    
    ( $o ["r": 24, "g": 33, "b": 55, "x": 22, "y": 42, "cells": [2, 5, 42]] = ) 
    ( $o ".g" -> 33 == :assert )
    ( $o ".y" -> 42 == :assert )
    ( $o ".x" -> 22 == :assert )
    ( $o ".cells.2" -> 42 == :assert )

    ( $o [ 1, 5, "some": [ 2, 4] ] = ) 
    ( $o ".some.0" -> 2 == :assert )
    ( $o ".length" 112 <- )
    ( $o ".length" -> 112 == :assert )    
        
    ( "mystikkogames" :reverse "semagokkitsym" == :assert ) 
    ( "12345" :reverse "54321" == :assert ) 
    
   	# How to read and write files in flang!
    ( $filename "temp.txt" = )
    ( $file $filename "w" :file_open = )
    ( $file "this is a test!" :fprintf )
	( $file :file_close )
    ( $data $filename :file_read = ) 
    ( $data "this is a test!" == :assert )	
	
    ( $o [] = ) 
    ( $o ".x" 125 <-  ) 
    ( $o ".x" -> 125 == :assert )

    ( 25 :sqrt 5 - :abs 0.1 < :assert ) 
    ( 100 :sqrt 10 - :abs 0.1 < :assert ) 
    
    ( -100 :abs 100 == :assert ) 
    ( 100 :abs 100 == :assert ) 
    ( 0 :abs 0 == :assert ) 
    
    ( 1 10 :max 10 == :assert ) 
    ( 42 10 :max 42 == :assert ) 
    ( 42 100 :max 100 == :assert ) 
    
    ( 1 10 :min 1 == :assert ) 
    ( 42 10 :min 10 == :assert ) 
    ( 42 100 :min 42 == :assert ) 
        
    ( 2 :floor 2 == :assert ) 
    ( 2.4 :floor 2 == :assert )    
    ( 2.9 :floor 2 == :assert )    
    ( -2.7 :floor -3 == :assert )  
    ( -2 :floor -2 == :assert )
    
    ( 2 :ceil 2 == :assert )
    ( 2.4 :ceil 3 == :assert )
    ( 2.9 :ceil 3 == :assert )
    ( -2.7 :ceil -2 :assert ) 
    ( -2 :ceil -2 :assert ) 
         
    ( 0 :sin 0.1 < :assert )
    ( 0 :cos 0.9 > :assert )
    ( 3.14 0.5 * :cos 0.1 < :assert )
    ( 3.14 0.5 * :sin 0.9 > :assert )
    ( 0 :tan 0.1 < :assert )
    
    ( 1 10 :random 11 < :assert ) 
    ( 5 10 :random 4 > :assert ) 
        
    ( $var "abc" = ) 
    ( $var2 "def" = ) 
    ( $var $var2 :join "abcdef" == :assert ) 
    ( "abc" "def" :join "abcdef" == :assert )    
    ( "mystikko" "games" :join "mystikkogames" == :assert )    
    ( "123" "321" :join "123321" == :assert )     
	
    ( "12345" "l" :contains ! :assert )
    ( "12345" "4" :contains :assert )
    ( "abcdef" "bcd" :contains :assert )
    ( "abcde484f" "484" :contains :assert )

    ( "abcde484f" "000" :contains ! :assert )
    ( "abcde123123484f" "trim" :contains ! :assert )
    
    ( 42 "abc%i" :sprintf "abc42" == :assert )
    ( 42.12345 "abc%.3f" :sprintf "abc42.123" == :assert )
    
    ( $var [] = ) 
    ( $var 1 :push ) 
    ( $var 2 :push ) 
    ( $var 3 :push ) 
    ( $var 42 :push ) 
    ( $var 3 :get 42 == :assert )
    ( $var :len 4 == :assert )
    
    ( $var [ "name": "mystikkogames" ] = ) 
    ( $var ".name" 42 <- )
    ( $var ".name" -> 42 == :assert )
    
    ( $multiply_by_2 ( lambda ( $num ) : ( $num 2 * ) ) = )
    ( 7 :$multiply_by_2 14 == :assert )
    ( 21 :$multiply_by_2 42 == :assert )
    ( $var2 $multiply_by_2 = )
    ( 21 :$var2 42 == :assert )

    ( $cruncher ( lambda ( $func1 $func2 ) : ( $a :$func1 = ) ( $b :$func2 = ) ( if ( $a $b > ) : ( $a ) else : ( $b ) ) ) = )
    # We can pass lambdas as arguments to functions!
    ( ( lambda ( ) : ( 11 ) ) ( lambda ( ) : ( 42 ) ) :$cruncher 42 == :assert )
        
    ( "1" :assert ) # true 
    ( "..." :assert ) # true   
    ( "0.0" :assert ) # true
    ( "false" :assert ) # true
    ( "-1" :assert ) # true
    ( -1 :assert ) # true
    
    # Only 0 is false in flang. Everything else is true! 
    ( 0 ! :assert ) # false 
        
  	# Make sure break works as expected!
   	( $var 42 = )
   	( loop ( 1 ) : ( if ( $var 45 == ) : ( break ) ) ( $var ++ ) )
    ( $var 45 == :assert )
    
  	# Make sure continue works as expected!
   	( $var 42 = )
   	( $i 0 = )
   	( loop ( $i 5 < ) : ( $i ++ ) ( if ( $i 0 > ) : ( continue ) ) ( $var ++ ) )
    ( $var 42 == :assert )
    
   	( $var 42 = )
   	( if ( 1 ) : ( $var 142 = ) )
    ( $var 142 == :assert )
   	
   	( $var 42 = )
   	( if ( 0 ) : ( $var 0 = ) else : ( $var 111 = ) )
    ( $var 111 == :assert )

   	( $var 42 = )
   	( if ( 0 ) : ( $var 0 = ) elif ( 1 ) : ( $var 19 = ) else : ( $var 111 = ) )
    ( $var 19 == :assert )
    
   	( $var 42 = )
   	( $var 10 %= )
   	( $var 2 == :assert )

   	( $var 42 = )
   	( $var 2 %= )
   	( $var 0 == :assert )

   	( $var 42 = )
   	( $var 2 -= )
   	( $var 40 == :assert )

   	( $var 42 = )
   	( $var 44 -= )
   	( $var -2 == :assert )
   	
   	( $var 42 = )
   	( $var 0 -= )
   	( $var 42 == :assert )

   	( $var 42 = )
   	( $var 2 += )
   	( $var 44 == :assert )

   	( $var 42 = )
   	( $var 2 /= )
   	( $var :floor 21 == :assert )

   	( $var 42 = )
   	( $var 42 /= )
   	( $var :floor 1 == :assert )

   	( $var 42 = )
   	( $var 2 *= )
   	( $var 84 == :assert )

   	( $var 42 = )
   	( $var -2 *= )
   	( $var -84 == :assert )

   	( $var 42 = )
   	( $var ++ )
   	( $var 43 == :assert )

   	( $var 42 = )
   	( $var -- )
   	( $var 41 == :assert )
    
   	( $var 100 = )
   	( $var 10 -= )
    ( $var 90 == :assert )
    
   	( $var 100 = )
   	( $var 10 += )
    ( $var 110 == :assert )
    
   	( $var 100 = )
   	( $var 0 += )
    ( $var 100 == :assert )
        
   	( $IAMGLOBAL 42 = )
   	( $IAMGLOBAL 42 == :assert )   	       
)

###
flang unit tests # 0.003s
### 
( function :main ( ) :    
    ( :clock_start )
    ( :flang_unit_tests )
    ( :clock_diff "flang unit tests # %.3fs\n" :printf )
)

