###
Unit tests for flang - language
 language: flang
 author: mystikkogames ( mystikkogames@protonmail.com )
 license: GPLv2
###

( include "string.flang" )

( function :flang_unit_tests ( ) :
    
    # POSITIVE
    
    ( "a b c d e f " :string_remove_whitespace "abcdef" == :assert )
    ( " " :string_is_whitespace :assert )
    
    ( "sdf 012-12-1 dfdsf" "/\d{3}-\d{2}-\d{1}/" :regex_match :assert )    
    ( "sdf 012dfdsf" "/[0-9]{3}/" :regex_match :assert )    
    ( "sdf 040-1234567 dfdsf" "/[0-9]{3}-[0-9]{7}/" :regex_match :assert )    
    ( "040-1234567 dfdsf" "/^[0-9]{3}-[0-9]{7}/" :regex_match :assert )    
  
    ( $o ["r": 24, "g": 33, "b": 55, "x": 22, "y": 42] = ) 
    ( $o ".g" -> 33 == :assert )
    ( $o ".y" -> 42 == :assert )
    ( $o ".x" -> 22 == :assert )


    ( $o ".x" 125 <-  ) 
    ( $o ".x" -> 125 == :assert )

	
    ( "abcdef" "bcd" :contain :assert )
    ( "abcde484f" "484" :contain :assert )

    ( $var [ "name": "mystikkogames" ] = ) 
    ( $var ".name" 42 <- )
    ( $var ".name" -> 42 == :assert )

    
    ( $multiply_by_2 ( lambda ( $num ) : ( $num 2 * ) ) = )
    ( 7 :$multiply_by_2 14 == :assert )
    ( 21 :$multiply_by_2 42 == :assert )
    ( $var2 $multiply_by_2 = )
    ( 21 :$var2 42 == :assert )

    ( $cruncher ( lambda ( $func1 $func2 ) : ( $a :$func1 = ) ( $b :$func2 = ) ( if ( $a $b > ) : ( $a ) else : ( $b ) ) ) = )
    # We can pass lambdas as arguments to functions!
    ( ( lambda ( ) : ( 11 ) ) ( lambda ( ) : ( 42 ) ) :$cruncher 42 == :assert )
        
    ( "1" :assert )    
    ( "..." :assert )    
    ( "0.0" :assert )
        
   	( $var 42 = )
   	( if ( 1 ) : ( $var 142 = ) )
    ( $var 142 == :assert )
   	
   	( $var 42 = )
   	( if ( 0 ) : ( $var 0 = ) else : ( $var 111 = ) )
    ( $var 111 == :assert )

   	( $var 42 = )
   	( if ( 0 ) : ( $var 0 = ) elif ( 1 ) : ( $var 19 = ) else : ( $var 111 = ) )
    ( $var 19 == :assert )
    
   	( $var 42 = )
   	( $var 10 %= )
   	( $var 2 == :assert )

   	( $var 42 = )
   	( $var 2 %= )
   	( $var 0 == :assert )

   	( $var 42 = )
   	( $var 2 -= )
   	( $var 40 == :assert )

   	( $var 42 = )
   	( $var 44 -= )
   	( $var -2 == :assert )

   	( $var 42 = )
   	( $var 2 += )
   	( $var 44 == :assert )

   	( $var 42 = )
   	( $var 2 /= )
   	( $var :int 21 == :assert )

   	( $var 42 = )
   	( $var 42 /= )
   	( $var :int 1 == :assert )

   	( $var 42 = )
   	( $var 2 *= )
   	( $var 84 == :assert )

   	( $var 42 = )
   	( $var -2 *= )
   	( $var -84 == :assert )

   	( $var 42 = )
   	( $var ++ )
   	( $var 43 == :assert )

   	( $var 42 = )
   	( $var -- )
   	( $var 41 == :assert )
    
   	( $var 100 = )
   	( $var 10 -= )
    ( $var 90 == :assert )
    
   	( $var 100 = )
   	( $var 10 += )
    ( $var 110 == :assert )
    
    
   	( $IAMGLOBAL 42 = )
   	( $IAMGLOBAL 42 == :assert )
   	
    ( 0 :sin 0.1 < :assert )
    ( 0 :cos 0.9 > :assert )

    # NEGATIVE

    ( "0" ! :assert ) # Only "0" is false in flang. Everything else is true! 

    ( "abcde484f" "000" :contain ! :assert )
    ( "abcde123123484f" "trim" :contain ! :assert )

    ( "sdf 040-1234567 dfdsf" "/^[0-9]{3}-[0-9]{7}/" :regex_match ! :assert )    
    ( "sdf 012dfdsf" "/[0-9]{4}/" :regex_match ! :assert )
        
)

( function :main ( ) :

	# flang unit tests # 0.055s
    ( :clock_start )
    ( :flang_unit_tests )
    ( :clock_diff "flang unit tests # %.3fs" :printf )

)

