###
Euler problems ( https://projecteuler.net/archives ) unit tests for flang - language.
 language: flang
 author: mystikkogames ( mystikkogames@protonmail.com )
 license: GPLv2
###

( include "utils.flang" )

( function :euler_1 ( ) :
    ( $sum 0 = )
    ( $i 1 = )
    ( loop ( $i 1000 < ) :
        ( if ( $i 5 % 0 == $i 3 % 0 == or ) : 
        	( $sum $i += ) 
        )
        ( $i ++ )
    )
    ( $sum ) 
)

( function :euler_2 ( ) : 
	( $sum 0 = )
	( $a 0 = )
	( $b 1 = )
	( $c 0 = )
	( loop ( $c 4000000 < ) : 
		( $c $a $b + = )	
		( $a $b = )
		( $b $c = )
		( if ( $c 2 % 0 == ) : 
            ( $sum $c += )
        )
	)
	( $sum ) # return here is optional since $sum is pushed to stack anyway
)

( function :euler_3 ( ) :   
	( $bignum 600851475143 = )
    ( $n 2 = )
    ( $biggest_factor 0 = )
	( loop ( $n $bignum 1 + < ) :
		( if ( $n :is_prime $bignum $n % 0 == and ) :
		    ( $bignum $n /= )
		    ( $biggest_factor $biggest_factor $n :max = )
        )
		( $n ++ )
    )
	( $biggest_factor )
)


( function :euler_4 ( ) :   
	( $start1 999 = )
	( $largest 0 = )
    ( loop ( $start1 100 > ) :
		( $start2 999 = )
        ( loop ( $start2 100 > ) :
            ( $res $start2 $start1 * = )
            ( if ( $res $largest < ) : ( break ) )
            ( if ( $res 0 :at $res 5 :at == 
                $res 1 :at $res 4 :at == and 
                $res 2 :at $res 3 :at == and ) :
                ( $largest $res $largest :max = ) ) 
            ( $start2 -- )
        )
        ( $start1 -- )    
    )
    ( $largest )
)


( function :euler_5 ( ) :   
	( $n 0 = )
    # because non-primes are multiples of primes: 18=2*3*3 / 20=2*2*5 ...
    ( $step 2 3 5 7 11 13 17 * * * * * * = ) 
    ( loop ( 1 ) :
        ( $n $step += )
        ( $remainder 0 = )
        ( $i 2 = )
        ( loop ( $i 22 < ) :
            ( if  ( $n $i % 0 != ) : 
                ( $remainder 1 = )
                ( break )
            )
            ( $i ++ )
        )
        ( if ( $remainder 0 == ) : 
        	( $n ) 
        	( return ) 
        ) 
    )
)

# brute force saves the day!
( function :euler_6 ( ) :   
	( $sum_of_squares 0 = )
	( $squares_of_sum 0 = )
    ( $i 1 = )
    ( loop ( $i 101 < ) :
	    ( $sum_of_squares $i $i * += )
	    ( $squares_of_sum $i += )
        ( $i ++ )
    )
    ( $squares_of_sum $squares_of_sum *= )
    ( $squares_of_sum $sum_of_squares - ) 
)

( function :euler_7 ( ) :   	
	( 10000 :prime_nth )
)

( function :euler_8 ( ) :   
    ( $f "data.json" :file_read  = )
    ( $data $f :fobj_compile ".euler_8" -> = ) 
    ( $str $data :remove_whitespace = )
    #( "sss" :print = )
    ( $len $str :strlen = )
    ( $i 0 = )
    ( $maximum 0 = )
    ( loop ( $i 13 + $len < ) :
        ( $j 1 = )
        ( $product $str $i :at = )
        ( loop ( $j 13 < ) :
            ( $product $str $i $j + :at $product * = )
            ( $j ++ )
        )
        ( $maximum $product $maximum :max = )
        ( $i ++ )
    )
	( $maximum )
)

( function :euler_9 ( ) :   
    ( $a 1 = )
    ( loop ( $a 1000 < ) :
        ( $b $a 1 + = )
        ( loop ( $b 1000 < ) :
                ( $sum $a $a * $b $b * + = )
                ( $c 1000 $a $b + - = )
                ( if ( $c $b > $c 2 :pow :floor $sum == and ) :
                	( 1000 $a $b + - $a $b * * ) 
                	( return )        
                )
            ( $b ++ )
        )
        ( $a ++ )
    )
    ( "Shouldn't see me!" :print )
)

# in brute force we trust!
( function :euler_10 ( ) :   
    ( $i 0 = )
    ( $sum 0 = )
    ( $prime 0 = )
    ( loop ( $prime 2000000 < ) :
        ( $sum $prime += )
        ( $prime $i :prime_nth = ) 
        ( $i ++ )
    )
    ( $sum )
)


( function :euler_11 ( ) :   
    ( $data "data.json" :file_read :fobj_compile =  ) 
    ( $str $data ".euler_11" -> :remove_whitespace = )
    ( $x 0 = )
    ( $maximum 0 = )
    ( loop ( $x 16 < ) :
        ( $y 0 = )  
        ( loop ( $y 16 < ) :
            ( $pnt $x 2 * $y 40 * + = )
            ( $product_x
                $str $pnt :at $str $pnt 1 + :at :join
                $str $pnt 2 + :at $str $pnt 3 + :at :join
                $str $pnt 4 + :at $str $pnt 5 + :at :join
                $str $pnt 6 + :at $str $pnt 7 + :at :join
                * * * = 
            )
            ( $product_y 
                $str $pnt :at $str $pnt 1 + :at :join
                $str $pnt 40 + :at $str $pnt 41 + :at :join
                $str $pnt 80 + :at $str $pnt 81 + :at :join
                $str $pnt 120 + :at $str $pnt 121 + :at :join
                * * * = 
            )
            ( $product_diagonal 
                $str $pnt :at $str $pnt 1 + :at :join
                $str $pnt 42 + :at $str $pnt 43 + :at :join
                $str $pnt 84 + :at $str $pnt 85 + :at :join
                $str $pnt 126 + :at $str $pnt 127 + :at :join
                * * * = 
            )
            ( $maximum $product_x $maximum :max = )
            ( $maximum $product_y $maximum :max = )
            ( $maximum $product_diagonal $maximum :max = )
            ( $y ++ ) 
        )
        ( $x ++ )
    )
    # this fucker goes the other way so I have a special case for it
    ( $x 4 = )
    ( loop ( $x 20 < ) :
        ( $y 0 = )  
        ( loop ( $y 16 < ) :
            ( $pnt $x 2 * $y 40 * + = )
            ( $product_diagonal 
                # a little bit of mental gymnaustic and your mind transforms 2D easily to 1D
                $str $pnt :at $str $pnt 1 + :at :join
                $str $pnt 38 + :at $str $pnt 39 + :at :join
                $str $pnt 76 + :at $str $pnt 77 + :at :join
                $str $pnt 114 + :at $str $pnt 115 + :at :join
                * * * = 
            )   
            ( $maximum $product_diagonal $maximum :max = )
            ( $y ++ ) 
        )
        ( $x ++ )
    )
    ( $maximum )
)

# You could simply brute force this too
# The idea here is to factorize number to its primes then sum their factor
# 28 = 2 ^ (2) * 7 ^ (1)
# (2 + 1) * (1 + 1) = 6 components
# I didn't know this math trick
# Credits: http://codeforces.com/blog/entry/22317
( function :euler_12 ( ) :   
	( $i 0 = )
	( loop ( 1 ) :
		( $sum2 $i $i 1 + * 2 / :floor = )
		( $sum $sum2 = )
		( $prime 0 :prime_nth = )
		( $k 0 = )
		( $count 1 = )
		# We can do this speedup since factorization primes are small
		# should verify propably
		( loop ( $prime $prime $prime * * $sum <= ) :
			( $factors 0 = )
			( $prime $k :prime_nth = )		
			( $sum3 $sum = )	
			( loop ( $sum3 $prime % 0 == ) :	
				( $sum3 $sum3 $prime / :floor = )			
				( $factors ++ )
			)			
			( $k ++ )
			( $count $factors 1 + *= )		
		)	
		( if ( $count 500 > ) : 
			( $sum2 ) 
			( return ) 
		)
		( $i ++ )
    )
)

# Good old brute force in action
( function :euler_13 ( ) :
    ( $data "data.json" :file_read :fobj_compile = ) 
    ( $bigdata $data ".euler_13" -> :remove_whitespace = )
    ( $x 49 = )
    ( $sum "" = )
    ( $leftover 0 = )
    ( loop ( $x 0 >= ) : 
        ( $y 0 = )
        ( loop ( $y 100 < ) :
            ( $leftover $bigdata $y 50 * $x + :at += )
            ( $y ++ )
        )
        ( $sum $leftover 10 % $sum :join = )
        ( $leftover $leftover 10 / :floor = )
        ( $x -- )
    )
    ( $sum $leftover $sum :join = )
    ( $answer "" = )
    ( $len $sum :strlen = )
    ( $i 0 = )
    ( loop ( $i 10 < ) : 
        ( $answer $answer $sum $i :at :join = )
        ( $i ++ )
    )
    ( $answer )  
)

# This is pretty much the most optimum algorithm I came up with.
# Pretty slow but that's how the cookie crambles
( function :euler_14 ( ) :
    ( $best_i 0 = )
    ( $largest 0 = )
    ( $i 0 = )
    ( $a [] = )
    ( loop ( $i 1000000 < ) : ( $i ++ ) ( $a 0 :push ) )
    ( $i 0 = )
   	( loop ( $i 1000000 < ) :
        ( $number $i = )
        ( $n 0 = )
        ( loop ( $number 1 > $number $i >= and ) :
        	( if ( $number 2 % 0 == ) : 
        		( $number $number 2 / :floor = ) 
        	else : 
        		( $number $number 3 * 1 + = ) 
        	)
        	( $n ++ )
        )
        ( $n $a $number :get += )
        ( $a $i $n :set )
       	( if ( $n $largest > ) : 
       		( $largest $n = ) 
       		( $best_i $i = ) 
       	)
        ( $i ++ )
    )
    ( $best_i )  
)

# Propably useless to use globals here but 
# you can use it to walk through general size of arrays
# flang now supports recursive functions!
( function :euler_15 ( ) :
    ( $luke_the_gridwalker ( lambda ( $a $x $y ) :
	    ( if ( $x 20 > $y 20 > or ) : 
		    ( 0 ) 
		    ( return ) 
	    )	
	    # ie. "2x2" grid is actually 3 wide that's why we make x 1 longer!
	    ( $pnt $y 20 1 + * $x + = )	
	    ( $n $a $pnt :get = )	
	    ( if ( $n 0 > ) : ( $n ) ( return ) )        
	    ( if ( $x 20 == $y 20 == and ) :
		    ( 1 )
		    ( return )
	    else : 
		    ( $tmp1 $x 1 + $y $a self = ) 
		    ( $tmp2 $x $y 1 + $a self = ) 		
		    ( $res $tmp1 $tmp2 + = )		
            ( $a $pnt $res :set )        
            ( $res )
		    ( return )
	    )
    ) = )
    ( $i 0 = )
    ( $a [] = )
    ( loop ( $i 1000000 < ) : ( $i ++ ) ( $a 0 :push ) )    
   	( 0 0 $a :$luke_the_gridwalker )
)

( function :euler_16 ( ) :
    ( $multiply_2 ( lambda ( $num ) : 
        ( $len $num :strlen = ) 
        ( $new "" = )
        ( $i $len 1 - = ) 
        ( $leftover 0 = ) 
        ( loop ( $i 0 >= ) : 
            ( $n $num $i :at = )
            ( $n $n 2 * $leftover + = )
            ( $leftover 0 = )
            ( if ( $n 9 > ) : ( $n 10 -= ) ( $leftover 1 = ) )
            ( $new $n $new :join = )
            ( $i -- ) 
        )
        ( if ( $leftover ) : ( $new $leftover $new :join = ) )
        ( $new )
    ) = )
    ( $num "2" = $i 1 = )    
    ( loop ( $i 1000 < ) : ( $num $num :$multiply_2 = ) ( $i ++ ) )
    ( $len $num :strlen = )
    ( $i 0 = )
    ( $sum 0 = )
    ( loop ( $i $len < ) : ( $sum $num $i :at += ) ( $i ++ ) )
    ( $sum )
)

( function :euler_17 ( ) :
    ( $num_words ( lambda ( $n ) : 
        ( if ( $n 1 == ) : ( "one" )  
        elif ( $n 2 == ) : ( "two" )  
        elif ( $n 3 == ) : ( "three" )  
        elif ( $n 4 == ) : ( "four" )  
        elif ( $n 5 == ) : ( "five" )  
        elif ( $n 6 == ) : ( "six" )  
        elif ( $n 7 == ) : ( "seven" )  
        elif ( $n 8 == ) : ( "eight" )  
        elif ( $n 9 == ) : ( "nine" )  
        elif ( $n 10 == ) : ( "ten" )  
        elif ( $n 11 == ) : ( "eleven" )  
        elif ( $n 12 == ) : ( "twelve" )  
        elif ( $n 13 == ) : ( "thirteen" )  
        elif ( $n 14 == ) : ( "fourteen" )  
        elif ( $n 15 == ) : ( "fifteen" )  
        elif ( $n 16 == ) : ( "sixteen" )  
        elif ( $n 17 == ) : ( "seventeen" )  
        elif ( $n 18 == ) : ( "eighteen" )  
        elif ( $n 19 == ) : ( "nineteen" )  
        elif ( $n 20 == ) : ( "twenty" )  
        elif ( $n 30 == ) : ( "thirty" )  
        elif ( $n 40 == ) : ( "forty" )  
        elif ( $n 50 == ) : ( "fifty" )  
        elif ( $n 60 == ) : ( "sixty" )  
        elif ( $n 70 == ) : ( "seventy" )
        elif ( $n 80 == ) : ( "eighty" ) 
        elif ( $n 90 == ) : ( "ninety" ) 
        else : ( "" )
    ) ) = )
    ( $num_to_words ( lambda ( $n $num_words ) :
        ( $res "" = )
        ( $len $n :strlen = ) 
        ( if ( $n :strlen 4 == ) : ( "onethousand" ) ( return ) )
        ( if ( $n :strlen 3 == ) : 
            ( $tmp $n 0 :at :$num_words = )
            ( $res $res $tmp :join "hundred" :join = ) 
            ( $n $n 1 3 :slice = ) 
            ( $n $n :floor = )
            ( if ( $n :floor ) : ( $res $res "and" :join = ) )
        )
        ( $n $n :floor = ) # cleanup because we might have ugly 01 / 06 ...
        ( if ( $n :strlen 2 <= ) :
            ( if ( $n 21 < ) : 
            ( $res $res $n :$num_words :join = ) 
                ( $res ) 
                ( return ) 
            )
            ( $tmp $n $n 10 % - :$num_words = )
            ( $tmp2 $n 10 % :$num_words = )
            ( $res $tmp :join $tmp2 :join ) 
            ( return )
        )
    ) = )
    ( $i 1 = ) 
    ( $sum 0 = ) 
    ( loop ( $i 1000 <= ) : ( $sum $num_words $i :$num_to_words :strlen += ) ( $i ++ ) )
    ( $sum )
)

( function :euler_18 ( ) :
    ( $luke_the_trianglewalker ( lambda ( $a $x $y ) :
        ( if ( $y 15 >= ) :
            ( 0 )
            ( return ) 
        )
        ( $s "7595641747821835871020048247651901237503348802777307636799650428061670924141265683408070334148723347323716942953714465254391529"
            "75114701133287773177839681757917152381714914358502729486366046889536730731669874031046298272309709873933853600423" :join = )
        # 0.5 * ( n + 1 ) * ( n )
        # 0 => 0 / 1 => 1 / 2 => 3 / 3 => 6 / 4 => 10 / ...
        ( $start 0.5 $y 1 + $y * * :floor 2 * = )
        ( $max 0 = )
        ( $pnt $start $x 2 * + = )
        ( $num $s $pnt :at = )
        ( $num $num $s $pnt 1 + :at :join = )
        ( $num $num :floor = )
        ( $tmp $a $pnt :get = )	
        ( if ( $tmp  ) : 
             ( $max $max $tmp $num + :max = )
            else : 
            ( $res1 $y 1 + $x $a self = )
            ( $res2 $y 1 + $x 1 + $a self = )
            ( $res $res1 $res2 :max = )
            ( $a $pnt $res :set ) 
            ( $max $max $res $num + :max = )
        )
        ( $max )
    ) = )
    ( $i 0 = )
    ( $a [] = )
    ( loop ( $i 1000000 < ) : ( $i ++ ) ( $a 0 :push ) )   
    ( 0 0 $a :$luke_the_trianglewalker ) 
)

( function :euler_32 ( ) :
    ( $i 0 = )
    ( $a [] = )
    ( loop ( $i 1000000 < ) : ( $i ++ ) ( $a 0 :push ) ) 
   	( $sum_of_products 0 = )
    ( $is_pandigital ( lambda ( $num ) : 
        ( $i 1 = )
        ( loop ( $i 9 <= ) : ( if ( $num $i :contain ! ) : ( 0 ) ( return ) ) ( $i ++ ) )
        ( 1 )
    ) = )
    ( $i 0 = )
    ( loop ( $i 3000 < ) :
        ( $j 0 = )
        ( loop ( $j 100 < ) : # 10 000 * 100 = 1 000 000 way more than needed 
            ( $product $i $j * = )
            ( $sum $i $j :join $product :join = )
            ( $len $sum :strlen = )
            ( if ( $len 9 > ) : ( break ) )
            ( if ( $len 9 == $sum :$is_pandigital and $a $product :get ! and ) : 
                ( $a $product 1 :set ) 
   	            ( $sum_of_products $product += )
            )         
            ( $j ++ )
        )
        ( $i ++ )
    )
    ( $sum_of_products  )
)

( function :euler_unit_tests ( ) :    
    ( $t :clock_diff = )
  	( :euler_1 233168 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_1 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_2 4613732 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_2 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_3 6857 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_3 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_4 906609 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_4 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_5 232792560 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_5 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_6 25164150 == :assert )    
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_6 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_7 104743 == :assert )    
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_7 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_8 23514624000 == :assert )    
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_8 # %.3fs" :printf )  	
    
    ( $t :clock_diff = )
    ( :euler_9 31875000 == :assert )    
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_9 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_10 142913828922 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_10 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_11 70600674 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_11 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_12 76576500 == :assert ) 
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_12 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_13 5537376230 == :assert ) 
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_13 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_14 837799 == :assert ) 
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_14 # %.3fs" :printf )  
  	
    ( $t :clock_diff = )
    ( :euler_15 137846528820 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_15 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_16 1366 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_16 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_17 21124 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_17 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_18 1074 == :assert )
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_18 # %.3fs" :printf )  	
  	
    ( $t :clock_diff = )
    ( :euler_32 45228 == :assert )    
    ( $t2 :clock_diff = )    
  	( $t2 $t - "euler_32 # %.3fs" :printf )  
)

###
euler_1 # 0.003s
euler_2 # 0.001s
euler_3 # 0.154s
euler_4 # 0.032s
euler_5 # 0.005s
euler_6 # 0.000s
euler_7 # 2.892s
euler_8 # 0.038s
euler_9 # 0.927s
euler_10 # 117.065s
euler_11 # 0.019s
euler_12 # 4.301s
euler_13 # 0.078s
euler_14 # 25.674s
euler_15 # 2.080s
euler_16 # 0.770s
euler_17 # 0.025s
euler_18 # 2.180s
euler_32 # 2.608s
euler problems # 158.854s
###
( function :main ( ) : 
	# init global primes array for :prime_nth
    ( $PRIMES [ 2, 3 ] = )    
    ( :clock_start )
	( :euler_unit_tests ) 
    ( :clock_diff "euler problems # %.3fs" :printf )
)

