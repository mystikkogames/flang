flang - a functional language

 flang's design philosophy: 
  1. Small, simple and extremely fast.
  2. Elegant. 
  3. Functional design.

 ( Very ) short guide
  - Variables: $myvar
  - Globals: $$myglobal
  - Singleline comments: #
  - Multiline comments: ### -> ###
  - break: breaks loop
  - continue: continues loop from start
  - include: Includes file at the top.
  - const: Creates a constant. Can't use that as a variable!
  - Types: No types. Everything is a string!
  - Boolean: "0" is false. Everything else is true. It's that simple!
  - loop: ( loop ( expr ) : ( statement ) ... )
  - if: ( if ( expr ) : ( statement ) ... 
   elif ( expr ) : ( statement ) ... else : ( statement ) ...  )
  - lambda: ( lambda ( $arg? ... ) : ( statement ) ... )
  - function: ( function :yourfunc ( $arg? ... ) : ( statement ) ... )
  - User function calls: :userfunc
  - flang function calls: *flangfunc
  - Set value: ( $var 42 = )
  - self: refers to current function/lambda
  - ++ / -- / += / -= / *= ...: Make code simpler and faster.
  - ...

 Random facts about flang
  - flang is an interpreted language like Ruby or Python.
  - flang has built-in regex lib ( pretty stable ) and json lib ( stable ).
  - flang stores everything in strings and only resolves types in runtime.
  - flang uses double for floats and long for integers.
  - flang uses dynamic memory allocation for most parts.
  - flang is designed for real world problems! 
  - flang is written in C-language.
  - flang has tons of unittests to stress flang to its limits.
  - flang's unittests/benchmarks: euler_problems.flang + unit_tests.flang

 Versions:
  - 0.7 
   - Initial release. Pretty stable.

  - 0.8 
   - Huge update
   - Added benchmarks
   - Fixed bugs. 
   - Solved 1 more euler. 
   - Everybody should definitely update 0.7 -> 0.8
   - Made code easier to read/write ie. ( $i ++ ) and faster too in benchmarks!
   - ( *exit ) added. Useful for debugging. Quits flang immediately!
   - ( *assert ) added
   - ( if ( $if ) : ( statement ) ( $if ! ) elif ( $elif ) : ( statement ...
    instead of clumsy ( if ( ( $if ) : ( statement ) ( $if ! ) ) elif ( ( statement ...
   - ( $i ++ ) instead of clumsy ( $i $i 1 + = )
   - ( $i -- ) instead of clumsy ( $i $i 1 - = )
   - ( $i 2.3 += ) instead of clumsy ( $i $i 2.3 + = )
   - ( $i 2.3 -= ) instead of clumsy ( $i $i 2.3 - = )
   - ( 1.23 1 *precision ! ) -> 1.2
   - ( *clock_start ) and ( *clock_diff ) you can benchmark your code very easily!

  - 0.81
   - Regex is now well written and easy to add features in future
   - A few bugs solved + speedups
   - unit_tests.flang added

  - 0.82
   - ( *read_file ) Very easy and safe to read file. Can read any size of file.
   - json improved. See unit tests
   - Solved 1 more euler in flang - language
   - Fixed a couple of bugs
   - data.json holds data for euler problems and others in json format

  - 0.83
   - 3 kind of arrays added for flang
    - shared_array of longs and doubles for performance
    - A general array in json - format. Very slow but works for anything.
    - Check out unittests for examples
   - speedups
   - Added one more solved euler in unit tests
   - tons of bug fixes
   - break_loop -> break
   - ! -> not
   - *print means now print

  - 0.84
   - flang now supports recursive functions!
   - And globals too!
   - Added 1 more solved euler. Check for example about recursive and globals 
    support in flang.

  - 0.85
   - Not so much new features. But under the hood I speedup flang a lot.
    Just cleaning and removing code resulted 15s save in unittests!
   - ( *array_pop ) added. It will remove the last element of the array. 
    Check for unitests for implementation!
   - Actually quite a lot of bugs

  - 0.86
   - This is a milestone release.
   - Lambdas added. They work the same way as functions but they are nameless 
    and you pass/assign them around.
   - *= added
   - /= added
   - much more
   - As lambdas land on flang all features I wanted are now set!
    As a one man project I have keep flang small and speedy!
    All needed now is just fixing bugs, improving speed 
    and adding more uselful functions. 
   - flang has a good design so adding lambdas was just 10 lines of code really.
   - self added. It refers to the current function.
   - :$var <- this calls a lambda function a variable refers to.
   - 3 more Eulers solved to show how labmda works in real world!
    Checkout euler_problems.flang
   
  - 0.87
   - Speed improved radically. Benchmarks 160s -> 50s
   - Tons of new features.
   - libs added so I can finally make flang much smaller
