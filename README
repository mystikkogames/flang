# flang - a functional language
#  - Functions are flang's first class citizens. 
#  - This is why I have 2 different function types :yourfunction for users and *max for flang. No name collisions!
#  - Variables are $myvar. The $-sign makes it easy to see variables. No types everything is a string.
#  - Types: you can sum ( 12.2 11 + ) but not ( 12.3 "lorem ipsum" + ) use *join instead .
#  - Currently I'm in the process of simplifying the syntax and speeding up flang.
#  - The worst thing flang can do is to crash and forgot to free memory. Which is totally safe in Linux.
#  - Give flang execute permissions: chmod +x ./flang
#  - Run command line (x: means execute): ./flang x:'(300 $var =)($var *prime_nth !)'
#  - Run file (f: means file): ./flang f:'examples.flang'
#  - regex lib is really bad atm. Only able to perform simplest things. Since it is very important I'm working on it.
#  - json lib is stable. Json lives in strings ie. "{'name': 'yourname'}".
#  - flang stores everything in strings and only resolves types in runtime.
#  - flang uses double for floats and long for integers.
#  - flang uses dynamic memory allocation for most parts.
#  - flang is an interpreted language like Ruby or Python.
#  - flang is designed to be small (50kb), fast and simple to write.
#  - flang is not designed just to solve euler problems. But to solve people's real world problems!
#  - flang is written in C-language.
#  - flang is compiled in Linux ( gcc -Wall -O2 -s flang-0.8c -o flang ). 
#      But it doesn't use anything Linux specific! flang works on any OS!
#  - flang is licenced for personal use. You own the binary on your computer not me!
#  - flang is designed for all the people not just programming wizards!
#  - ...
#
#  - Versions:
#  - 0.7 
#    - Initial release. Pretty stable.
#  - 0.8 
#    - Huge update
#    - Added benchmarks
#    - Fixed bugs. 
#    - Solved 1 more euler. 
#    - Everybody should definitely update 0.7 -> 0.8
#    - Made code easier to read/write ie. ( $i ++ ) and faster too in benchmarks!
#    - ( *exit ) added. Useful for debugging. Quits flang immediately!
#    - ( *assert ) added
#    - ( if ( $if ) : ( statement ) ( $if ! ) elif ( $elif ) : ( statement ) ( $elif ! ) else : ( statement ) ( $else ! ) )
#        instead of clumsy ( if ( ( $if ) : ( statement ) ( $if ! ) ) elif ( ( statement ) ( $elif ) : ( $elif !) ) else : ( ( statement ) ( $else ! ) ) )
#    - ( $i ++ ) instead of clumsy ( $i $i 1 + = )
#    - ( $i -- ) instead of clumsy ( $i $i 1 - = )
#    - ( $i 2.3 += ) instead of clumsy ( $i $i 2.3 + = )
#    - ( $i 2.3 -= ) instead of clumsy ( $i $i 2.3 - = )
#    - ( 1.23 1 *precision ! ) -> 1.2
#    - ( *clock_start ) and ( *clock_diff ) you can benchmark your code very easily!
