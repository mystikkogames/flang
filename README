flang - a functional language

flang's design philosophy: 
 1. Small, simple and extremely fast.
 2. Elegant. 
 3. Functional design.

( Very ) short guide. See unit_tests.flang for full manual.
 - variables: $myvar
 - globals: $GLOBAL
 - constants: $$MYCONST
 - break/continue
 - include: Includes file at the top.
 - const: Creates a constant. Can't use that as a variable!
 - types: No types. Everything is a string!
 - boolean: 0 is false. Everything else is true. It's that simple!
 - loop: ( loop ( expr ) : ( stmt ) ... )
 - if: ( if ( expr ) : ( stmt ) ... )
 - lambda: ( lambda ( $arg? ... ) : ( stmt ) ... )
 - function: ( function :yourfunc ( $arg? ... ) : ( stmt ) ... )
 - function calls: ( 2 1 :max "max: %i\n" :printf )
 - Full support for (s/f)printf's.
 - set value: ( $var 42 = )
 - self: refers to current function/lambda.
 - ++ / -- / += / -= / *= ...: Makes code simpler and faster.
 - ...

Random facts about flang
 - flang is an interpreted language like Ruby or Python.
 - flang has built-in regex fobj - libs.
 - flang stores everything in strings and only resolves types in runtime.
 - flang uses double for floats and long for integers.
 - flang uses dynamic memory allocation for most parts.
 - flang is designed for real world problems! 
 - flang is written in C-language.
 - flang has tons of unittests to stress flang to its limits.
 - flang's unittests + benchmarks: euler_problems.flang + unit_tests.flang
